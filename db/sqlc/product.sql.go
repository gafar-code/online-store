// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: product.sql

package db

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one

INSERT INTO
    products (
        category_id,
        name,
        image_url,
        description,
        price
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING id, category_id, name, image_url, description, price, created_at
`

type CreateProductParams struct {
	CategoryID  int64  `json:"category_id"`
	Name        string `json:"name"`
	ImageUrl    string `json:"image_url"`
	Description string `json:"description"`
	Price       int64  `json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.CategoryID,
		arg.Name,
		arg.ImageUrl,
		arg.Description,
		arg.Price,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.ImageUrl,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :one

SELECT id, category_id, name, image_url, description, price, created_at FROM products WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.ImageUrl,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const getProductByCategoryId = `-- name: GetProductByCategoryId :many

SELECT id, category_id, name, image_url, description, price, created_at FROM products WHERE category_id = $1 LIMIT 1
`

func (q *Queries) GetProductByCategoryId(ctx context.Context, categoryID int64) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProductByCategoryId, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Name,
			&i.ImageUrl,
			&i.Description,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
