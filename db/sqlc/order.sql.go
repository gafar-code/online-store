// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: order.sql

package db

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one

INSERT INTO
    orders (
        customer_id,
        virtual_account_id
    )
VALUES ($1, $2)
RETURNING id, customer_id, virtual_account_id, created_at
`

type CreateOrderParams struct {
	CustomerID       int64 `json:"customer_id"`
	VirtualAccountID int64 `json:"virtual_account_id"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.CustomerID, arg.VirtualAccountID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.VirtualAccountID,
		&i.CreatedAt,
	)
	return i, err
}

const listOrderByCustomerId = `-- name: ListOrderByCustomerId :many

SELECT id, customer_id, virtual_account_id, created_at FROM orders ORDER BY customer_id LIMIT $1 OFFSET $2
`

type ListOrderByCustomerIdParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrderByCustomerId(ctx context.Context, arg ListOrderByCustomerIdParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrderByCustomerId, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.VirtualAccountID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
