// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: order_item.sql

package db

import (
	"context"
)

const createOrderItem = `-- name: CreateOrderItem :one

INSERT INTO
    order_items (
        product_id,
        qty,
        order_id
    )
VALUES ($1, $2, $3)
RETURNING id, product_id, qty, order_id, created_at
`

type CreateOrderItemParams struct {
	ProductID int64 `json:"product_id"`
	Qty       int64 `json:"qty"`
	OrderID   int64 `json:"order_id"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem, arg.ProductID, arg.Qty, arg.OrderID)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Qty,
		&i.OrderID,
		&i.CreatedAt,
	)
	return i, err
}

const listOrderItemByOrderId = `-- name: ListOrderItemByOrderId :many

SELECT id, product_id, qty, order_id, created_at FROM order_items WHERE order_id = $1 LIMIT $2 OFFSET $3
`

type ListOrderItemByOrderIdParams struct {
	OrderID int64 `json:"order_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListOrderItemByOrderId(ctx context.Context, arg ListOrderItemByOrderIdParams) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, listOrderItemByOrderId, arg.OrderID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Qty,
			&i.OrderID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
