// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: transaction.sql

package db

import (
	"context"
	"time"
)

const createTransaction = `-- name: CreateTransaction :one

INSERT INTO
    transactions (
        customer_id,
        status,
        issued_at,
        order_id
    )
VALUES ($1, $2, $3, $4)
RETURNING id, customer_id, status, issued_at, order_id, created_at
`

type CreateTransactionParams struct {
	CustomerID int64     `json:"customer_id"`
	Status     string    `json:"status"`
	IssuedAt   time.Time `json:"issued_at"`
	OrderID    int64     `json:"order_id"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.CustomerID,
		arg.Status,
		arg.IssuedAt,
		arg.OrderID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.IssuedAt,
		&i.OrderID,
		&i.CreatedAt,
	)
	return i, err
}

const listTransactionByCustomerId = `-- name: ListTransactionByCustomerId :many

SELECT id, customer_id, status, issued_at, order_id, created_at FROM transactions ORDER BY customer_id LIMIT $1 OFFSET $2
`

type ListTransactionByCustomerIdParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransactionByCustomerId(ctx context.Context, arg ListTransactionByCustomerIdParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionByCustomerId, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Status,
			&i.IssuedAt,
			&i.OrderID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
