// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: order_proof.sql

package db

import (
	"context"
)

const createOrderProof = `-- name: CreateOrderProof :one

INSERT INTO
    order_proof (
        order_id,
        name_holder,
        rekening_number,
        image_url
    )
VALUES ($1, $2, $3, $4)
RETURNING id, order_id, name_holder, rekening_number, image_url, created_at
`

type CreateOrderProofParams struct {
	OrderID        int64  `json:"order_id"`
	NameHolder     string `json:"name_holder"`
	RekeningNumber int64  `json:"rekening_number"`
	ImageUrl       string `json:"image_url"`
}

func (q *Queries) CreateOrderProof(ctx context.Context, arg CreateOrderProofParams) (OrderProof, error) {
	row := q.db.QueryRowContext(ctx, createOrderProof,
		arg.OrderID,
		arg.NameHolder,
		arg.RekeningNumber,
		arg.ImageUrl,
	)
	var i OrderProof
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.NameHolder,
		&i.RekeningNumber,
		&i.ImageUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getOrderProof = `-- name: GetOrderProof :one

SELECT id, order_id, name_holder, rekening_number, image_url, created_at FROM order_proof WHERE order_id = $1 LIMIT $1
`

func (q *Queries) GetOrderProof(ctx context.Context, limit int32) (OrderProof, error) {
	row := q.db.QueryRowContext(ctx, getOrderProof, limit)
	var i OrderProof
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.NameHolder,
		&i.RekeningNumber,
		&i.ImageUrl,
		&i.CreatedAt,
	)
	return i, err
}
